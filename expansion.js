//
// Autogenerated by Thrift Compiler (0.10.0)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//
//KazumiLine JavaScript Functional Expansion
//
"use strict";

var thrift = require('thrift');
var Thrift = thrift.Thrift;
var Q = thrift.Q;
const thrifts = require('thrift-http');

var TalkException = module.exports.TalkException = function(args) {
  Thrift.TException.call(this, "TalkException");
  this.name = "TalkException";
  this.code = null;
  this.reason = null;
  this.parameterMap = null;
  if (args) {
    if (args.code !== undefined && args.code !== null) {
      this.code = args.code;
    }
    if (args.reason !== undefined && args.reason !== null) {
      this.reason = args.reason;
    }
    if (args.parameterMap !== undefined && args.parameterMap !== null) {
      this.parameterMap = Thrift.copyMap(args.parameterMap, [null]);
    }
  }
};
Thrift.inherits(TalkException, Thrift.TException);
TalkException.prototype.name = 'TalkException';
TalkException.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.code = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.reason = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.MAP) {
        var _size1034 = 0;
        var _rtmp31038;
        this.parameterMap = {};
        var _ktype1035 = 0;
        var _vtype1036 = 0;
        _rtmp31038 = input.readMapBegin();
        _ktype1035 = _rtmp31038.ktype;
        _vtype1036 = _rtmp31038.vtype;
        _size1034 = _rtmp31038.size;
        for (var _i1039 = 0; _i1039 < _size1034; ++_i1039)
        {
          var key1040 = null;
          var val1041 = null;
          key1040 = input.readString();
          val1041 = input.readString();
          this.parameterMap[key1040] = val1041;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TalkException.prototype.write = function(output) {
  output.writeStructBegin('TalkException');
  if (this.code !== null && this.code !== undefined) {
    output.writeFieldBegin('code', Thrift.Type.I32, 1);
    output.writeI32(this.code);
    output.writeFieldEnd();
  }
  if (this.reason !== null && this.reason !== undefined) {
    output.writeFieldBegin('reason', Thrift.Type.STRING, 2);
    output.writeString(this.reason);
    output.writeFieldEnd();
  }
  if (this.parameterMap !== null && this.parameterMap !== undefined) {
    output.writeFieldBegin('parameterMap', Thrift.Type.MAP, 3);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRING, Thrift.objectLength(this.parameterMap));
    for (var kiter1042 in this.parameterMap)
    {
      if (this.parameterMap.hasOwnProperty(kiter1042))
      {
        var viter1043 = this.parameterMap[kiter1042];
        output.writeString(kiter1042);
        output.writeString(viter1043);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};
var TalkService_kickoutFromGroup_args = function(args) {
  this.reqSeq = null;
  this.groupId = null;
  this.contactIds = null;
  if (args) {
    if (args.reqSeq !== undefined && args.reqSeq !== null) {
      this.reqSeq = args.reqSeq;
    }
    if (args.groupId !== undefined && args.groupId !== null) {
      this.groupId = args.groupId;
    }
    if (args.contactIds !== undefined && args.contactIds !== null) {
      this.contactIds = Thrift.copyList(args.contactIds, [null]);
    }
  }
};
TalkService_kickoutFromGroup_args.prototype = {};
TalkService_kickoutFromGroup_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.reqSeq = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.groupId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.LIST) {
        var _size2062 = 0;
        var _rtmp32066;
        this.contactIds = [];
        var _etype2065 = 0;
        _rtmp32066 = input.readListBegin();
        _etype2065 = _rtmp32066.etype;
        _size2062 = _rtmp32066.size;
        for (var _i2067 = 0; _i2067 < _size2062; ++_i2067)
        {
          var elem2068 = null;
          elem2068 = input.readString();
          this.contactIds.push(elem2068);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TalkService_kickoutFromGroup_args.prototype.write = function(output) {
  output.writeStructBegin('TalkService_kickoutFromGroup_args');
  if (this.reqSeq !== null && this.reqSeq !== undefined) {
    output.writeFieldBegin('reqSeq', Thrift.Type.I32, 1);
    output.writeI32(this.reqSeq);
    output.writeFieldEnd();
  }
  if (this.groupId !== null && this.groupId !== undefined) {
    output.writeFieldBegin('groupId', Thrift.Type.STRING, 2);
    output.writeString(this.groupId);
    output.writeFieldEnd();
  }
  if (this.contactIds !== null && this.contactIds !== undefined) {
    output.writeFieldBegin('contactIds', Thrift.Type.LIST, 3);
    output.writeListBegin(Thrift.Type.STRING, this.contactIds.length);
    for (var iter2069 in this.contactIds)
    {
      if (this.contactIds.hasOwnProperty(iter2069))
      {
        iter2069 = this.contactIds[iter2069];
        output.writeString(iter2069);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TalkService_kickoutFromGroup_result = function(args) {
  this.e = null;
  if (args instanceof TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
TalkService_kickoutFromGroup_result.prototype = {};
TalkService_kickoutFromGroup_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TalkService_kickoutFromGroup_result.prototype.write = function(output) {
  output.writeStructBegin('TalkService_kickoutFromGroup_result');
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TalkService_cancelGroupInvitation_args = function(args) {
  this.reqSeq = null;
  this.groupId = null;
  this.contactIds = null;
  if (args) {
    if (args.reqSeq !== undefined && args.reqSeq !== null) {
      this.reqSeq = args.reqSeq;
    }
    if (args.groupId !== undefined && args.groupId !== null) {
      this.groupId = args.groupId;
    }
    if (args.contactIds !== undefined && args.contactIds !== null) {
      this.contactIds = Thrift.copyList(args.contactIds, [null]);
    }
  }
};
TalkService_cancelGroupInvitation_args.prototype = {};
TalkService_cancelGroupInvitation_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.reqSeq = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.groupId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.LIST) {
        var _size1580 = 0;
        var _rtmp31584;
        this.contactIds = [];
        var _etype1583 = 0;
        _rtmp31584 = input.readListBegin();
        _etype1583 = _rtmp31584.etype;
        _size1580 = _rtmp31584.size;
        for (var _i1585 = 0; _i1585 < _size1580; ++_i1585)
        {
          var elem1586 = null;
          elem1586 = input.readString();
          this.contactIds.push(elem1586);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TalkService_cancelGroupInvitation_args.prototype.write = function(output) {
  output.writeStructBegin('TalkService_cancelGroupInvitation_args');
  if (this.reqSeq !== null && this.reqSeq !== undefined) {
    output.writeFieldBegin('reqSeq', Thrift.Type.I32, 1);
    output.writeI32(this.reqSeq);
    output.writeFieldEnd();
  }
  if (this.groupId !== null && this.groupId !== undefined) {
    output.writeFieldBegin('groupId', Thrift.Type.STRING, 2);
    output.writeString(this.groupId);
    output.writeFieldEnd();
  }
  if (this.contactIds !== null && this.contactIds !== undefined) {
    output.writeFieldBegin('contactIds', Thrift.Type.LIST, 3);
    output.writeListBegin(Thrift.Type.STRING, this.contactIds.length);
    for (var iter1587 in this.contactIds)
    {
      if (this.contactIds.hasOwnProperty(iter1587))
      {
        iter1587 = this.contactIds[iter1587];
        output.writeString(iter1587);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TalkService_cancelGroupInvitation_result = function(args) {
  this.e = null;
  if (args instanceof TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
TalkService_cancelGroupInvitation_result.prototype = {};
TalkService_cancelGroupInvitation_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TalkService_cancelGroupInvitation_result.prototype.write = function(output) {
  output.writeStructBegin('TalkService_cancelGroupInvitation_result');
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TalkServiceClient = exports.Client = function(output, pClass) {
    this.output = output;
    this.pClass = pClass;
    this._seqid = 0;
    this._reqs = {};
};
TalkServiceClient.prototype = {};
TalkServiceClient.prototype.seqid = function() { return this._seqid; };
TalkServiceClient.prototype.new_seqid = function() { return this._seqid += 1; };
TalkServiceClient.prototype.kickoutFromGroup = function(reqSeq, groupId, contactIds, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_kickoutFromGroup(reqSeq, groupId, contactIds);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_kickoutFromGroup(reqSeq, groupId, contactIds);
  }
};

TalkServiceClient.prototype.send_kickoutFromGroup = function(reqSeq, groupId, contactIds) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('kickoutFromGroup', Thrift.MessageType.CALL, this.seqid());
  var args = new TalkService_kickoutFromGroup_args();
  args.reqSeq = reqSeq;
  args.groupId = groupId;
  args.contactIds = contactIds;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

TalkServiceClient.prototype.recv_kickoutFromGroup = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new TalkService_kickoutFromGroup_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  callback(null);
};

TalkServiceClient.prototype.cancelGroupInvitation = function(reqSeq, groupId, contactIds, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_cancelGroupInvitation(reqSeq, groupId, contactIds);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_cancelGroupInvitation(reqSeq, groupId, contactIds);
  }
};

TalkServiceClient.prototype.send_cancelGroupInvitation = function(reqSeq, groupId, contactIds) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('cancelGroupInvitation', Thrift.MessageType.CALL, this.seqid());
  var args = new TalkService_cancelGroupInvitation_args();
  args.reqSeq = reqSeq;
  args.groupId = groupId;
  args.contactIds = contactIds;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

TalkServiceClient.prototype.recv_cancelGroupInvitation = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new TalkService_cancelGroupInvitation_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  callback(null);
};

var gid = '';
var uids = [];
var cuids = [];
var token = ''; 
var service = 'IOS\t8.16.2\tIOS\t12.4.1';

process.argv.forEach(function (val) {
  if(val.includes('gid=')){
      gid = val.split('gid=').pop();
  }else if(val.includes('uid=')){
      uids.push(val.split('uid=').pop());
  }else if(val.includes('cud=')){
      cuids.push(val.split('cud=').pop());
  }else if(val.includes('token=')){
      token = val.split('token=').pop();
  }else if(val.includes('service=')){
      service = val.split('service=').pop();
  }
});
var options={
    protocol: thrifts.TCompactProtocol,
    transport: thrifts.TBufferedTransport,
    headers: {'User-Agent':'Line/9.20.2','X-Line-Application':service,'X-Line-Access':token },
    path: '/S4',
    https: true
    }
var connection = thrifts.createHttpConnection('legy-jp.line.naver.jp', 443, options);
connection.on('error', (err) => { console.log('err',err); return err; });
var _client = thrifts.createHttpClient(TalkServiceClient, connection);
    
if (uids!==[]){
    for (var i=0; i < uids.length; i++) {
        _client.kickoutFromGroup(0, gid, [uids[i]]);
    }
}
if (cuids!==[]){
    for (var i=0; i < cuids.length; i++) {
        _client.cancelGroupInvitation(0, gid, [cuids[i]]);
    }
}

